{"changed":true,"filter":false,"title":"total_cost.js","tooltip":"/static/js/total_cost.js","value":"queue()\n    .defer(d3.csv, \"data/total_cost.csv\")\n    .await(makeTotalCostGraps);\n    \nfunction makeTotalCostGraps(error, totalCost){\n    \n    var parseDate = d3.time.format(\"%Y-%m-%d\").parse;\n        totalCost.forEach(function(d){\n            d.PaymentDate = parseDate(d.PaymentDate);\n        });\n\n    \n   var ndx=crossfilter(totalCost);\n   makePie(ndx);\n   StackedBarChartTotalCost(ndx);\n   dc.renderAll();\n}\n    \n\n\nfunction StackedBarChartTotalCost(ndx){\n    var payment_date_dim_bar = ndx.dimension(dc.pluck(\"PaymentDate\"));\n    var minDate = payment_date_dim_bar.bottom(1)[0].PaymentDate;\n    var maxDate = payment_date_dim_bar.top(1)[0].PaymentDate;\n    var NettpayByMonth = payment_date_dim_bar.group().reduceSum(function (d) {\n            if (d.Type === 'Nettpay') {\n                return +d.Sum;\n            } else {\n                return 0;\n            }\n        });\n    \n    var TaxesByMonth = payment_date_dim_bar.group().reduceSum(function (d) {\n            if (d.Type === 'Taxes') {\n                return +d.Sum;\n            } else {\n                return 0;\n            }\n        });\n        \n    var SocialSecurityFeesByMonth = payment_date_dim_bar.group().reduceSum(function (d) {\n            if (d.Type === 'Social Security Fees') {\n                return +d.Sum;\n            } else {\n                return 0;\n            }\n        });\n   \n    dc.barChart('#total-cost-stacked-bar-chart')\n            .width(1500)\n            .height(800)\n            .margins({top: 10, left: 80, right: 1, bottom: 50})\n            .dimension(payment_date_dim_bar)\n            .group(NettpayByMonth, \"Nettpay\")\n            .stack(TaxesByMonth, \"Taxes\")\n            .stack(SocialSecurityFeesByMonth, \"Sociala\")\n            .renderLabel(true)/*gets total label for whole bar*/\n            .elasticX(true)\n            .xAxisPadding(10)\n            .gap(15)\n            .centerBar(true)\n            .x(d3.time.scale().domain([minDate,maxDate]))\n            .xUnits(d3.time.months)\n           /* .barPadding(0.3)/*adjusts with of each bar*/\n            .on('renderlet', function (chart) {\n                //Check if labels exist\n                var gLabels = chart.select(\".labels\");\n                if (gLabels.empty()){\n                    gLabels = chart.select(\".chart-body\").append('g').classed('labels', true);\n                }\n            \n                var gLabelsData = gLabels.selectAll(\"text\").data(chart.selectAll(\".bar\")[0]);\n                gLabelsData.exit().remove(); //Remove unused elements\n                gLabelsData.enter().append(\"text\"); //Add new elements\n                gLabelsData\n                .attr('text-anchor', 'middle')\n                .attr('fill', 'black')\n                .text(function(d){\n                    text_object =  d3.select(d).datum().y\n                    console.log(text_object)\n                    return text_object\n                })\n                .attr('x', function(d){ \n                    return +d.getAttribute('x') + (d.getAttribute('width')/2); \n                })\n                .attr('y', function(d){ return +d.getAttribute('y') + 15; })\n                .attr('style', function(d){\n                    if (+d.getAttribute('height') < 18) return \"display:none\";\n                });\n            \n            });\n}\n\n\n\n\nfunction makePie(ndx) {\n    var type_dim = ndx.dimension(dc.pluck(\"Type\"));\n    var total_cost_pie_chart = type_dim.group().reduceSum(dc.pluck('Sum'));\n    \n\n    dc.pieChart('#total-cost-pie-chart')\n        .legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n        .height(1000)\n        .radius(200)\n        .innerRadius(100)\n        .transitionDuration(1500)\n        .dimension(type_dim)\n        .group(total_cost_pie_chart)\n        .legend(dc.legend()\n            .x(140)\n            .y(180)\n            .itemHeight(13)\n            .gap(9)\n            .legendText(function(d){return d.name + \" \" + d.data + \" \" + \"KR (\" +  Math.round((d.data/(8129071/100))*100)/100 + \"%)\"}))\n        .renderLabel(false)\n        .ordinalColors(['#1f78b4', '#F88212', '#2EA122']);\n}\n\n","undoManager":{"mark":1,"position":4,"stack":[[{"start":{"row":0,"column":0},"end":{"row":5,"column":50},"action":"remove","lines":["/*steg: ","1. skapa HTML.","2. skapa function","3.lägg till function under make graph*/","","/*väntar med att skapa graf tills data är laddat*/"],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"remove","lines":["",""],"id":3}],[{"start":{"row":26,"column":12},"end":{"row":26,"column":16},"action":"remove","lines":["    "],"id":4}],[{"start":{"row":26,"column":12},"end":{"row":26,"column":13},"action":"insert","lines":[" "],"id":5},{"start":{"row":26,"column":13},"end":{"row":26,"column":14},"action":"insert","lines":[" "]},{"start":{"row":26,"column":14},"end":{"row":26,"column":15},"action":"insert","lines":[" "]}],[{"start":{"row":26,"column":15},"end":{"row":26,"column":16},"action":"insert","lines":[" "],"id":6}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":24,"column":0},"end":{"row":24,"column":78},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":18,"state":"no_regex","mode":"ace/mode/javascript"}},"timestamp":1568209118133}