{"changed":true,"filter":false,"title":"total.cost.js","tooltip":"/static/js/total.cost.js","value":"/*steg: \n1. skapa HTML.\n2. skapa function\n3.lägg till function under make graph*/\n\n/*väntar med att skapa graf tills data är laddat*/\nqueue()\n    .defer(d3.csv, \"data/total.cost.csv\")\n    .await(makeTotalCostGraps);\n    \nfunction makeTotalCostGraps(error, totalCost){\n    \n    var parseDate = d3.time.format(\"%Y-%m-%d\").parse;\n        totalCost.forEach(function(d){\n            d.PaymentDate = parseDate(d.PaymentDate);\n        });\n\n    \n   var ndx=crossfilter(totalCost);\n   makePie(ndx);\n   TotalLineGraph(ndx);\n   StackedBarChartTotalCost(ndx);\n   dc.renderAll();\n}\n    \n    \n/*skapar graf och hämtar data*/\nfunction StackedBarChartTotalCost(ndx){\n    var payment_date_dim_bar = ndx.dimension(dc.pluck(\"PaymentDate\"));\n    var minDate = payment_date_dim_bar.bottom(1)[0].PaymentDate;\n    var maxDate = payment_date_dim_bar.top(1)[0].PaymentDate;\n    var NettpayByMonth = payment_date_dim_bar.group().reduceSum(function (d) {\n            if (d.Type === 'Nettpay') {\n                return +d.Sum;\n            } else {\n                return 0;\n            }\n        });\n    \n    var TaxesByMonth = payment_date_dim_bar.group().reduceSum(function (d) {\n            if (d.Type === 'Taxes') {\n                return +d.Sum;\n            } else {\n                return 0;\n            }\n        });\n        \n    var SocialSecurityFeesByMonth = payment_date_dim_bar.group().reduceSum(function (d) {\n            if (d.Type === 'Social Security Fees') {\n                return +d.Sum;\n            } else {\n                return 0;\n            }\n        });\n   \n    dc.barChart('#total-cost-stacked-bar-chart')\n            .width(1500)\n            .height(800)\n            .margins({top: 10, left: 80, right: 1, bottom: 50})\n            .dimension(payment_date_dim_bar)\n            .group(NettpayByMonth, \"Nettpay\")\n            .stack(TaxesByMonth, \"Taxes\")\n            .stack(SocialSecurityFeesByMonth, \"Sociala\")\n            .renderLabel(true)/*gets total label for whole bar*/\n            .elasticX(true)\n            .xAxisPadding(10)\n            .gap(15)\n            .centerBar(true)\n            .x(d3.time.scale().domain([minDate,maxDate]))\n            .xUnits(d3.time.months)\n           /* .barPadding(0.3)/*adjusts with of each bar*/\n            .legend(dc.legend().x(420).y(0).itemHeight(15).gap(5))\n            .on('renderlet', function (chart) {\n                //Check if labels exist\n                var gLabels = chart.select(\".labels\");\n                if (gLabels.empty()){\n                    gLabels = chart.select(\".chart-body\").append('g').classed('labels', true);\n                }\n            \n                var gLabelsData = gLabels.selectAll(\"text\").data(chart.selectAll(\".bar\")[0]);\n                gLabelsData.exit().remove(); //Remove unused elements\n                gLabelsData.enter().append(\"text\") //Add new elements\n                gLabelsData\n                .attr('text-anchor', 'middle')\n                .attr('fill', 'white')\n                .text(function(d){\n                    text_object =  d3.select(d).datum().y\n                    console.log(text_object)\n                    return text_object\n                })\n                .attr('x', function(d){ \n                    return +d.getAttribute('x') + (d.getAttribute('width')/2); \n                })\n                .attr('y', function(d){ return +d.getAttribute('y') + 15; })\n                .attr('style', function(d){\n                    if (+d.getAttribute('height') < 18) return \"display:none\";\n                });\n            \n            });\n}\n\n\nfunction TotalLineGraph(ndx) {  \n    var payment_date_dim = ndx.dimension(dc.pluck(\"PaymentDate\"));  \n    var total_spend_per_date = payment_date_dim.group().reduceSum(dc.pluck('Sum'));\n    \n    var minDate = payment_date_dim.bottom(1)[0].PaymentDate;\n    var maxDate = payment_date_dim.top(1)[0].PaymentDate;\n  \n    dc.lineChart('#total-cost-line-graph')  \n        .width(1000)  \n        .height(300)  \n        .margins({top: 10, right: 150, bottom: 30, left: 150})\n        .dimension(payment_date_dim)  \n        .group(total_spend_per_date)  \n        .transitionDuration(500)  \n        .x(d3.time.scale().domain([minDate,maxDate]))  \n        .xAxisLabel(\"Month\")  \n        .yAxis().ticks(8);\n}  \n\n\n\nfunction makePie(ndx) {\n    var type_dim = ndx.dimension(dc.pluck(\"Type\"));\n    var total_cost_pie_chart = type_dim.group().reduceSum(dc.pluck('Sum'));\n    \n\n    dc.pieChart('#total-cost-pie-chart')\n          \n        .height(1000)\n        .radius(200)\n        .innerRadius(100)\n        .transitionDuration(1500)\n        .dimension(type_dim)\n        .group(total_cost_pie_chart)\n        .externalLabels(50)\n        /*8129071: har summerat ihopp för hand vill hitta kod som summerar ihopp åt mig. \n        *100)/100 i slutet av formeln är för att få med 2 decimal tecken i procenten\n        */\n        .label(function(d){return d.key + \" \" + d.value + \" \" + \"KR (\" +  Math.round((d.value/(8129071/100))*100)/100 + \"%)\"})\n        .renderLabel(true);\n}\n\n","undoManager":{"mark":-2,"position":12,"stack":[[{"start":{"row":127,"column":75},"end":{"row":128,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":128,"column":0},"end":{"row":128,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":128,"column":4},"end":{"row":128,"column":92},"action":"insert","lines":["var groupTotal = d.chart.group().all().reduce(function(a, v){ return a + v.value; }, 0);"],"id":3}],[{"start":{"row":128,"column":4},"end":{"row":128,"column":92},"action":"remove","lines":["var groupTotal = d.chart.group().all().reduce(function(a, v){ return a + v.value; }, 0);"],"id":4}],[{"start":{"row":130,"column":40},"end":{"row":131,"column":0},"action":"insert","lines":["",""],"id":5},{"start":{"row":131,"column":0},"end":{"row":131,"column":4},"action":"insert","lines":["    "]},{"start":{"row":131,"column":4},"end":{"row":131,"column":5},"action":"insert","lines":[" "]},{"start":{"row":131,"column":5},"end":{"row":131,"column":6},"action":"insert","lines":[" "]},{"start":{"row":131,"column":6},"end":{"row":131,"column":7},"action":"insert","lines":[" "]},{"start":{"row":131,"column":7},"end":{"row":131,"column":8},"action":"insert","lines":[" "]}],[{"start":{"row":131,"column":8},"end":{"row":131,"column":96},"action":"insert","lines":["var groupTotal = d.chart.group().all().reduce(function(a, v){ return a + v.value; }, 0);"],"id":6}],[{"start":{"row":131,"column":95},"end":{"row":131,"column":96},"action":"remove","lines":[";"],"id":7}],[{"start":{"row":131,"column":8},"end":{"row":131,"column":9},"action":"insert","lines":[" "],"id":8}],[{"start":{"row":131,"column":24},"end":{"row":131,"column":25},"action":"remove","lines":["="],"id":16},{"start":{"row":131,"column":23},"end":{"row":131,"column":24},"action":"remove","lines":[" "]},{"start":{"row":131,"column":22},"end":{"row":131,"column":23},"action":"remove","lines":["l"]},{"start":{"row":131,"column":21},"end":{"row":131,"column":22},"action":"remove","lines":["a"]},{"start":{"row":131,"column":20},"end":{"row":131,"column":21},"action":"remove","lines":["t"]},{"start":{"row":131,"column":19},"end":{"row":131,"column":20},"action":"remove","lines":["o"]},{"start":{"row":131,"column":18},"end":{"row":131,"column":19},"action":"remove","lines":["T"]},{"start":{"row":131,"column":17},"end":{"row":131,"column":18},"action":"remove","lines":["p"]},{"start":{"row":131,"column":16},"end":{"row":131,"column":17},"action":"remove","lines":["u"]},{"start":{"row":131,"column":15},"end":{"row":131,"column":16},"action":"remove","lines":["o"]},{"start":{"row":131,"column":14},"end":{"row":131,"column":15},"action":"remove","lines":["r"]},{"start":{"row":131,"column":13},"end":{"row":131,"column":14},"action":"remove","lines":["g"]},{"start":{"row":131,"column":12},"end":{"row":131,"column":13},"action":"remove","lines":[" "]},{"start":{"row":131,"column":11},"end":{"row":131,"column":12},"action":"remove","lines":["r"]},{"start":{"row":131,"column":10},"end":{"row":131,"column":11},"action":"remove","lines":["a"]},{"start":{"row":131,"column":9},"end":{"row":131,"column":10},"action":"remove","lines":["v"]}],[{"start":{"row":131,"column":10},"end":{"row":131,"column":80},"action":"remove","lines":["d.chart.group().all().reduce(function(a, v){ return a + v.value; }, 0)"],"id":17}],[{"start":{"row":127,"column":75},"end":{"row":128,"column":4},"action":"remove","lines":["","    "],"id":38,"ignore":true},{"start":{"row":130,"column":0},"end":{"row":131,"column":0},"action":"remove","lines":["          ",""]}],[{"start":{"row":127,"column":75},"end":{"row":128,"column":4},"action":"insert","lines":["","    "],"id":39,"ignore":true},{"start":{"row":131,"column":0},"end":{"row":132,"column":0},"action":"insert","lines":["          ",""]}],[{"start":{"row":29,"column":0},"end":{"row":29,"column":4},"action":"remove","lines":["    "],"id":40},{"start":{"row":28,"column":70},"end":{"row":29,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":31,"column":0},"end":{"row":31,"column":4},"action":"remove","lines":["    "],"id":41},{"start":{"row":30,"column":61},"end":{"row":31,"column":0},"action":"remove","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":1556.5,"scrollleft":0,"selection":{"start":{"row":55,"column":3},"end":{"row":71,"column":66},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1565407625883}